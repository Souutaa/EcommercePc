package com.app.ecommerce.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.ecommerce.models.Account;
import com.app.ecommerce.respositories.AccountRepo;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class CreateAccountForm {
    String username;
    String password;
}

@RestController // This means that this class is a Controller
@RequestMapping("/demo") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called accountRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private AccountRepo accountRepository;

    @PostMapping("/add") // Map ONLY POST Requests
    public @ResponseBody String addNewAccount(@RequestBody CreateAccountForm dataInput) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Account n = new Account();
        n.setUsername(dataInput.username);
        n.setPassword(dataInput.password);
        accountRepository.save(n);
        return "Saved";
    }

    @GetMapping("/all")
    public @ResponseBody ResponseEntity<Object> getAllAccount() {
        // This returns a JSON or XML with the users
        Map<String, String> data = new HashMap<>();
        data.put("key1", "value1");
        data.put("key2", "value2");
        return new ResponseEntity<>(data, HttpStatus.OK);
    }
}
