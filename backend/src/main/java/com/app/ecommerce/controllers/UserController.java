package com.app.ecommerce.controllers;

import org.mindrot.jbcrypt.BCrypt;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.app.ecommerce.exceptions.ResourceNotFoundException;
import com.app.ecommerce.models.Account;
import com.app.ecommerce.services.IAccountServices;
import com.app.ecommerce.utils.Utils;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class CreateAccountForm {
    String username;
    String password;

    public String getUsername() {
        return username;
    }

    public String getPassword() {
        return password;
    }

    public void setUsername(String username) {
        this.username = username;
    }

    public void setPassword(String password) {
        this.password = password;
    }
}

@RestController // This means that this class is a Controller
@RequestMapping(value = "/demo") // This means URL's start with /demo (after Application path)
public class UserController {
    // @Autowired // This means to get the bean called accountRepository
    // // Which is auto-generated by Spring, we will use it to handle the data
    // private AccountRepo accountRepository;
    @Autowired
    private IAccountServices accountServices;

    @PostMapping(value = "/add", consumes = {"Application/json"}) // Map ONLY POST Requests
    public @ResponseBody Account addNewAccount(@RequestBody CreateAccountForm dataInput) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        String hashed = Utils.hashData(dataInput.getPassword());
        Account n = new Account();
        n.setUsername(dataInput.getUsername());
        n.setPassword(hashed);
        return accountServices.saveAccount(n);
    }

    @GetMapping(value = "/getUser")
    public @ResponseBody ResponseEntity<Object> getAllAccount(@RequestParam String id) {
        // This returns a JSON or XML with the users
        Account test = accountServices.getAccountById(Integer.parseInt(id));
        return new ResponseEntity<>(test, HttpStatus.OK);
    }

    @PostMapping(value = "/login", consumes = {"Application/json"})
    public @ResponseBody ResponseEntity<Object> login(@RequestBody CreateAccountForm dataInput) {
        // This returns a JSON or XML with the users
        Account account = accountServices.getAccountByUserName(dataInput.getUsername());
        if (Utils.compareHashedData(dataInput.getPassword(), account.getPassword()))
            return new ResponseEntity<>(account, HttpStatus.OK);
        else 
            throw new ResourceNotFoundException("Invalid username or password");
    }
}
